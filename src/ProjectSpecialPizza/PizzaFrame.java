package ProjectSpecialPizza;

import com.hp.hpl.jena.query.QuerySolution;
import com.hp.hpl.jena.rdf.model.Literal;
import com.hp.hpl.jena.rdf.model.RDFNode;
import com.hp.hpl.jena.rdf.model.Resource;
import java.awt.event.ItemEvent;
import java.nio.charset.Charset;
import java.util.ArrayList;

public class PizzaFrame extends javax.swing.JFrame {

    //public ArrayList<String> PizzaList = new ArrayList<String>();

    public PizzaFrame() {
        initComponents();
        this.setLocationRelativeTo(null);
        /*SalsasList();
        CarneList();
        QuesoList();
        VegetalesList();
        MariscosList();
        EspeciasList();
        FruitList();*/
        //TypeEventoPizza();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnPizzas = new javax.swing.JButton();
        jcmbQueso = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jcmbCarne = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jcmbVegetales = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jcmbTypeSelectedPizza = new javax.swing.JComboBox<>();
        jcmbMariscos = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jcmbEspecias = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jcmbFrutas = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jcmbSalsas = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jcmbTypePizzas = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 51, 0));
        jLabel1.setText("SpecialPizza");

        btnPizzas.setFont(new java.awt.Font("Arial Narrow", 1, 14)); // NOI18N
        btnPizzas.setText("Mostrar Datos");
        btnPizzas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPizzasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(116, 116, 116)
                .addComponent(btnPizzas, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btnPizzas))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jcmbQueso.setFont(new java.awt.Font("Arial Narrow", 0, 14)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Arial Narrow", 1, 18)); // NOI18N
        jLabel2.setText("Ingredientes:");

        jLabel3.setFont(new java.awt.Font("Arial Narrow", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(204, 102, 0));
        jLabel3.setText("Carne");

        jLabel4.setFont(new java.awt.Font("Arial Narrow", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(204, 102, 0));
        jLabel4.setText("Queso");

        jcmbCarne.setFont(new java.awt.Font("Arial Narrow", 0, 14)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Arial Narrow", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(204, 102, 0));
        jLabel5.setText("Vegetales");

        jcmbVegetales.setFont(new java.awt.Font("Arial Narrow", 0, 14)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Arial Narrow", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(204, 102, 0));
        jLabel6.setText("Mariscos");

        jcmbTypeSelectedPizza.setFont(new java.awt.Font("Arial Narrow", 0, 14)); // NOI18N

        jcmbMariscos.setFont(new java.awt.Font("Arial Narrow", 0, 14)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Arial Narrow", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(204, 102, 0));
        jLabel7.setText("Especias");

        jcmbEspecias.setFont(new java.awt.Font("Arial Narrow", 0, 14)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Arial Narrow", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(204, 102, 0));
        jLabel8.setText("Frutas");

        jcmbFrutas.setFont(new java.awt.Font("Arial Narrow", 0, 14)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Arial Narrow", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(204, 102, 0));
        jLabel9.setText("Salsas");

        jcmbSalsas.setFont(new java.awt.Font("Arial Narrow", 0, 14)); // NOI18N
        jcmbSalsas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcmbSalsasActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Arial Narrow", 1, 18)); // NOI18N
        jLabel10.setText("Información Pizza:");

        jLabel11.setFont(new java.awt.Font("Arial Narrow", 1, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(204, 102, 0));
        jLabel11.setText("Elija una opción:");

        jcmbTypePizzas.setFont(new java.awt.Font("Arial Narrow", 0, 14)); // NOI18N
        jcmbTypePizzas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--------------------", "TradicionalPizza", "EventoPizza" }));
        jcmbTypePizzas.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcmbTypePizzasItemStateChanged(evt);
            }
        });

        jScrollPane1.setViewportView(jList1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(98, 98, 98)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(82, 82, 82)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(82, 82, 82)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jcmbEspecias, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jcmbFrutas, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jcmbSalsas, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jcmbTypePizzas, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(23, 23, 23)
                                .addComponent(jcmbTypeSelectedPizza, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jcmbCarne, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jcmbQueso, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jcmbVegetales, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jcmbMariscos, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel2)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcmbCarne, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcmbQueso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcmbVegetales, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcmbMariscos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcmbEspecias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcmbFrutas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcmbSalsas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addComponent(jLabel10)
                .addGap(18, 18, 18)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jcmbTypeSelectedPizza, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jcmbTypePizzas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPizzasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPizzasActionPerformed

    }//GEN-LAST:event_btnPizzasActionPerformed

    private void jcmbSalsasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcmbSalsasActionPerformed
        //SalsasList();
    }//GEN-LAST:event_jcmbSalsasActionPerformed

    private void jcmbTypePizzasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcmbTypePizzasItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED){
            if(this.jcmbTypePizzas.getSelectedItem().toString() == "EventoPizza"){
                ArrayList<String> typePizza = new ArrayList<String>();
                try {
                    System.out.println("Getting Type Pizza");  // get the name list querry
                    String queryString;
                    queryString = "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>"
                            + "PREFIX saidi:<http://www.semanticweb.org/tfgra/ontologies/2021/5/special-pizza#> "
                            + "SELECT DISTINCT ?s "
                            + "where {  ?s rdfs:subClassOf  saidi:EventoPizza   }";

                    com.hp.hpl.jena.query.ResultSet results = OpenOWL.ExecSparQl(queryString); //all method ExecSparQl from OpenOWL class

                    while (results.hasNext()) {

                        QuerySolution soln = results.nextSolution();

                        RDFNode x = soln.getResource("s");
                        //x.asResource().getLocalName();
                        String xx = String.valueOf(x.asResource().getLocalName());
                        System.out.println("----->"+x);
                        java.nio.ByteBuffer xxx = Charset.forName("UTF-8").encode(xx);

                        String xs = xxx.toString();

                        typePizza.add(xx);
                    }
                    jcmbTypeSelectedPizza.removeAllItems(); //  combobox nameList
                    for (int i = 0; i < typePizza.size(); i++) {

                        jcmbTypeSelectedPizza.addItem(typePizza.get(i));
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }else{
                ArrayList<String> typePizza = new ArrayList<String>();
                try {
                    System.out.println("Getting Type Pizza");  // get the name list querry
                    String queryString;
                    queryString = "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>"
                            + "PREFIX saidi:<http://www.semanticweb.org/tfgra/ontologies/2021/5/special-pizza#> "
                            + "SELECT DISTINCT ?s "
                            + "where {  ?s rdfs:subClassOf  saidi:TradicionalPizza   }";

                    com.hp.hpl.jena.query.ResultSet results = OpenOWL.ExecSparQl(queryString); //all method ExecSparQl from OpenOWL class

                    while (results.hasNext()) {

                        QuerySolution soln = results.nextSolution();

                        RDFNode x = soln.getResource("s");
                        //x.asResource().getLocalName();
                        String xx = String.valueOf(x.asResource().getLocalName());
                        System.out.println("----->"+x);
                        java.nio.ByteBuffer xxx = Charset.forName("UTF-8").encode(xx);

                        String xs = xxx.toString();

                        typePizza.add(xx);
                    }
                    jcmbTypeSelectedPizza.removeAllItems(); //  combobox nameList
                    for (int i = 0; i < typePizza.size(); i++) {

                        jcmbTypeSelectedPizza.addItem(typePizza.get(i));
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_jcmbTypePizzasItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PizzaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PizzaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PizzaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PizzaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PizzaFrame().setVisible(true);
            }
        });
    }
    
    public void CarneList(){
        ArrayList<String> listCarne = new ArrayList<String>();
        try {
            System.out.println("Getting PizzaTopping Carne");  // get the name list querry
            String queryString;
            queryString = "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>"
                    + "PREFIX saidi:<http://www.semanticweb.org/tfgra/ontologies/2021/5/special-pizza#> "
                    + "SELECT ?Pizza1 "
                    + "where {  ?Pizza1  rdfs:subClassOf saidi:CarneTopping  }";
            
         //   System.out.println("--"+ queryString);
            /*queryString = "PREFIX saidi:<http://www.semanticweb.org/pc/ontologies/2018/9/untitled-ontology-20#> "
                    + "SELECT  (str(?x) as ?NamePerson) "
                    + "where { ?y saidi:hasname ?x."
                    + " }";*/

            com.hp.hpl.jena.query.ResultSet results = OpenOWL.ExecSparQl(queryString); //all method ExecSparQl from OpenOWL class
            
            while (results.hasNext()) {

                QuerySolution soln = results.nextSolution();
                
                //String NameOfPerson = soln.getLiteral("Pizza").getString();
                String NameOfPerson1 = soln.getResource("Pizza1").getLocalName();
                
                //System.out.println(NameOfPerson1);
                //test --
                //System.out.println("Pizza Desc -> " + NameOfPerson.toString());
                //PizzaList.add(NameOfPerson.toString());
                System.out.println("-> " + NameOfPerson1.toString());
                listCarne.add(NameOfPerson1.toString());

                /*RDFNode x = soln.get("Pizza1");
                String xx = String.valueOf(x);

                java.nio.ByteBuffer xxx = Charset.forName("UTF-8").encode(xx);

                String xs = xxx.toString();*/
            }
            jcmbCarne.removeAllItems(); //  combobox nameList
            for (int i = 0; i < listCarne.size(); i++) {

                jcmbCarne.addItem(listCarne.get(i));
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    
    public void QuesoList(){
        ArrayList<String> listQueso = new ArrayList<String>();
        try {
            System.out.println("Getting PizzaTopping Queso");  // get the name list querry
            String queryString;
            queryString = "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>"
                    + "PREFIX saidi:<http://www.semanticweb.org/tfgra/ontologies/2021/5/special-pizza#> "
                    + "SELECT ?Pizza1 "
                    + "where {  ?Pizza1  rdfs:subClassOf saidi:QuesoTopping  }";
            
         //   System.out.println("--"+ queryString);
            /*queryString = "PREFIX saidi:<http://www.semanticweb.org/pc/ontologies/2018/9/untitled-ontology-20#> "
                    + "SELECT  (str(?x) as ?NamePerson) "
                    + "where { ?y saidi:hasname ?x."
                    + " }";*/

            com.hp.hpl.jena.query.ResultSet results = OpenOWL.ExecSparQl(queryString); //all method ExecSparQl from OpenOWL class
          //  System.out.println("->" + results);
            while (results.hasNext()) {

                QuerySolution soln = results.nextSolution();
                
                //String NameOfPerson = soln.getLiteral("Pizza").getString();
                String NameOfPerson1 = soln.getResource("Pizza1").getLocalName();
                
                //System.out.println(NameOfPerson1);
                //test --
                //System.out.println("Pizza Desc -> " + NameOfPerson.toString());
                //PizzaList.add(NameOfPerson.toString());
                System.out.println("-> " + NameOfPerson1.toString());
                listQueso.add(NameOfPerson1.toString());

                /*RDFNode x = soln.get("Propertyval");

                String xx = String.valueOf(x);

                java.nio.ByteBuffer xxx = Charset.forName("UTF-8").encode(xx);

                String xs = xxx.toString();*/

            }
            jcmbQueso.removeAllItems(); //  combobox nameList
            for (int i = 0; i < listQueso.size(); i++) {

                jcmbQueso.addItem(listQueso.get(i));
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public void VegetalesList(){
        ArrayList<String> listVegetales = new ArrayList<String>();
        try {
            System.out.println("Getting PizzaTopping Vegetales");  // get the name list querry
            String queryString;
            queryString = "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>"
                    + "PREFIX saidi:<http://www.semanticweb.org/tfgra/ontologies/2021/5/special-pizza#> "
                    + "SELECT ?Pizza1 "
                    + "where {  ?Pizza1  rdfs:subClassOf saidi:VegetableTopping  }";
            
         //   System.out.println("--"+ queryString);
            /*queryString = "PREFIX saidi:<http://www.semanticweb.org/pc/ontologies/2018/9/untitled-ontology-20#> "
                    + "SELECT  (str(?x) as ?NamePerson) "
                    + "where { ?y saidi:hasname ?x."
                    + " }";*/

            com.hp.hpl.jena.query.ResultSet results = OpenOWL.ExecSparQl(queryString); //all method ExecSparQl from OpenOWL class
          //  System.out.println("->" + results);
            while (results.hasNext()) {

                QuerySolution soln = results.nextSolution();
                
                //String NameOfPerson = soln.getLiteral("Pizza").getString();
                String NameOfPerson1 = soln.getResource("Pizza1").getLocalName();
                
                //System.out.println(NameOfPerson1);
                //test --
                //System.out.println("Pizza Desc -> " + NameOfPerson.toString());
                //PizzaList.add(NameOfPerson.toString());
                System.out.println("-> " + NameOfPerson1.toString());
                listVegetales.add(NameOfPerson1.toString());

                /*RDFNode x = soln.get("Propertyval");

                String xx = String.valueOf(x);

                java.nio.ByteBuffer xxx = Charset.forName("UTF-8").encode(xx);

                String xs = xxx.toString();*/

            }
            jcmbVegetales.removeAllItems(); //  combobox nameList
            for (int i = 0; i < listVegetales.size(); i++) {

                jcmbVegetales.addItem(listVegetales.get(i));
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    
    public void MariscosList(){
        ArrayList<String> listMariscos = new ArrayList<String>();
        try {
            System.out.println("Getting PizzaTopping Mariscos");  // get the name list querry
            String queryString;
            queryString = "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>"
                    + "PREFIX saidi:<http://www.semanticweb.org/tfgra/ontologies/2021/5/special-pizza#> "
                    + "SELECT ?Pizza1 "
                    + "where {  ?Pizza1  rdfs:subClassOf saidi:MariscosTopping  }";
            
            com.hp.hpl.jena.query.ResultSet results = OpenOWL.ExecSparQl(queryString); //all method ExecSparQl from OpenOWL class

            while (results.hasNext()) {

                QuerySolution soln = results.nextSolution();
                
                /*String NameOfPerson1 = soln.getResource("Pizza1").getLocalName();

                System.out.println("-> " + NameOfPerson1.toString());
                listMariscos.add(NameOfPerson1.toString());*/

                RDFNode x = soln.getResource("Pizza1");
                //x.asResource().getLocalName();
                String xx = String.valueOf(x.asResource().getLocalName());
                System.out.println("----->"+x);
                java.nio.ByteBuffer xxx = Charset.forName("UTF-8").encode(xx);

                String xs = xxx.toString();
                
                listMariscos.add(xx);
            }
            jcmbMariscos.removeAllItems(); //  combobox nameList
            for (int i = 0; i < listMariscos.size(); i++) {

                jcmbMariscos.addItem(listMariscos.get(i));
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    
    public void EspeciasList(){
        ArrayList<String> listEspecias = new ArrayList<String>();
        try {
            System.out.println("Getting PizzaTopping Especias");  // get the name list querry
            String queryString;
            queryString = "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>"
                    + "PREFIX saidi:<http://www.semanticweb.org/tfgra/ontologies/2021/5/special-pizza#> "
                    + "SELECT ?Pizza1 "
                    + "where {  ?Pizza1  rdfs:subClassOf saidi:EspeciesTopping  }";
            
            com.hp.hpl.jena.query.ResultSet results = OpenOWL.ExecSparQl(queryString); //all method ExecSparQl from OpenOWL class

            while (results.hasNext()) {

                QuerySolution soln = results.nextSolution();

                RDFNode x = soln.getResource("Pizza1");
                String xx = String.valueOf(x.asResource().getLocalName());
                System.out.println("->"+x);
                //java.nio.ByteBuffer xxx = Charset.forName("UTF-8").encode(xx);
                //String xs = xxx.toString();
                
                listEspecias.add(xx);
            }
            jcmbEspecias.removeAllItems(); //  combobox nameList
            for (int i = 0; i < listEspecias.size(); i++) {

                jcmbEspecias.addItem(listEspecias.get(i));
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    
    public void FruitList(){
        ArrayList<String> listFrutas = new ArrayList<String>();
        try {
            System.out.println("Getting PizzaTopping Especias");  // get the name list querry
            String queryString;
            queryString = "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>"
                    + "PREFIX saidi:<http://www.semanticweb.org/tfgra/ontologies/2021/5/special-pizza#> "
                    + "SELECT ?Pizza1 "
                    + "where {  ?Pizza1  rdfs:subClassOf saidi:FrutasTopping  }";
            
            com.hp.hpl.jena.query.ResultSet results = OpenOWL.ExecSparQl(queryString); //all method ExecSparQl from OpenOWL class

            while (results.hasNext()) {

                QuerySolution soln = results.nextSolution();

                RDFNode x = soln.getResource("Pizza1");
                String xx = String.valueOf(x.asResource().getLocalName());
                System.out.println("->"+x);
                //java.nio.ByteBuffer xxx = Charset.forName("UTF-8").encode(xx);
                //String xs = xxx.toString();
                
                listFrutas.add(xx);
            }
            jcmbFrutas.removeAllItems(); //  combobox nameList
            for (int i = 0; i < listFrutas.size(); i++) {

                jcmbFrutas.addItem(listFrutas.get(i));
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    
    public void SalsasList(){
        ArrayList<String> listSalsas = new ArrayList<String>();
        try {
            System.out.println("Getting PizzaTopping Salsas");  // get the name list querry
            String queryString;
            queryString = "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>"
                    + "PREFIX saidi:<http://www.semanticweb.org/tfgra/ontologies/2021/5/special-pizza#> "
                    + "SELECT ?Pizza1 "
                    + "where {  ?Pizza1  rdfs:subClassOf saidi:SalsasTopping  }";

            com.hp.hpl.jena.query.ResultSet results = OpenOWL.ExecSparQl(queryString); //all method ExecSparQl from OpenOWL class

            while (results.hasNext()) {

                QuerySolution soln = results.nextSolution();

                String NameOfPerson1 = soln.getResource("Pizza1").getLocalName();

                System.out.println("-> " + NameOfPerson1.toString());
                listSalsas.add(NameOfPerson1.toString());
            }
            jcmbSalsas.removeAllItems(); //  combobox nameList
            for (int i = 0; i < listSalsas.size(); i++) {

                jcmbSalsas.addItem(listSalsas.get(i));
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    
    public void TypeEventoPizza(){
//        String m = jcmbTypePizzas.getSelectedItem().toString();
//        System.out.println(m);
//        if(jcmbTypePizzas.getSelectedItem().toString() == "EventoPizza"){
//            System.out.println("dssdsds");
//        }
        ArrayList<String> typePizza = new ArrayList<String>();
        try {
            System.out.println("Getting Type Pizza");  // get the name list querry
            String queryString;
            queryString = "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>"
                    + "PREFIX saidi:<http://www.semanticweb.org/tfgra/ontologies/2021/5/special-pizza#> "
                    + "SELECT DISTINCT ?s "
                    + "where {  ?s rdfs:subClassOf  saidi:EventoPizza   }";
            
            com.hp.hpl.jena.query.ResultSet results = OpenOWL.ExecSparQl(queryString); //all method ExecSparQl from OpenOWL class
            
            while (results.hasNext()) {

                QuerySolution soln = results.nextSolution();
                
                RDFNode x = soln.getResource("s");
                //x.asResource().getLocalName();
                String xx = String.valueOf(x.asResource().getLocalName());
                System.out.println("----->"+x);
                java.nio.ByteBuffer xxx = Charset.forName("UTF-8").encode(xx);

                String xs = xxx.toString();
                
                typePizza.add(xx);
            }
            jcmbTypeSelectedPizza.removeAllItems(); //  combobox nameList
            for (int i = 0; i < typePizza.size(); i++) {

                jcmbTypeSelectedPizza.addItem(typePizza.get(i));
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPizzas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> jcmbCarne;
    private javax.swing.JComboBox<String> jcmbEspecias;
    private javax.swing.JComboBox<String> jcmbFrutas;
    private javax.swing.JComboBox<String> jcmbMariscos;
    private javax.swing.JComboBox<String> jcmbQueso;
    private javax.swing.JComboBox<String> jcmbSalsas;
    private javax.swing.JComboBox<String> jcmbTypePizzas;
    private javax.swing.JComboBox<String> jcmbTypeSelectedPizza;
    private javax.swing.JComboBox<String> jcmbVegetales;
    // End of variables declaration//GEN-END:variables
}
